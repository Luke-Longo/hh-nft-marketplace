/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace NftMarketplaceChallenge {
  export type ListingParamsStruct = {
    nftAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<BigNumberish>;
  };

  export type ListingParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    nftAddress: string;
    tokenId: BigNumber;
    amount: BigNumber;
    token: number;
  };

  export type ListingStruct = {
    amount: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
  };

  export type ListingStructOutput = [BigNumber, number, string] & {
    amount: BigNumber;
    token: number;
    seller: string;
  };
}

export interface NftMarketplaceChallengeInterface extends utils.Interface {
  functions: {
    "buyItem((address,uint256,uint256,uint8))": FunctionFragment;
    "cancelListing(address,uint256)": FunctionFragment;
    "getDaiPriceFeed()": FunctionFragment;
    "getDaiToken()": FunctionFragment;
    "getEthPriceFeed()": FunctionFragment;
    "getListing(address,uint256)": FunctionFragment;
    "getListingPriceUsd(address,uint256)": FunctionFragment;
    "getProceeds(address,uint8)": FunctionFragment;
    "getProceedsAll()": FunctionFragment;
    "getUsdcPriceFeed()": FunctionFragment;
    "getUsdcToken()": FunctionFragment;
    "listItem((address,uint256,uint256,uint8))": FunctionFragment;
    "tokenAddresses(uint8)": FunctionFragment;
    "updateListing((address,uint256,uint256,uint8))": FunctionFragment;
    "withdrawAllProceeds()": FunctionFragment;
    "withdrawSingleProceeds(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyItem"
      | "cancelListing"
      | "getDaiPriceFeed"
      | "getDaiToken"
      | "getEthPriceFeed"
      | "getListing"
      | "getListingPriceUsd"
      | "getProceeds"
      | "getProceedsAll"
      | "getUsdcPriceFeed"
      | "getUsdcToken"
      | "listItem"
      | "tokenAddresses"
      | "updateListing"
      | "withdrawAllProceeds"
      | "withdrawSingleProceeds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [NftMarketplaceChallenge.ListingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaiPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDaiToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingPriceUsd",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProceeds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProceedsAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdcPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdcToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [NftMarketplaceChallenge.ListingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [NftMarketplaceChallenge.ListingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllProceeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSingleProceeds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDaiPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDaiToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingPriceUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProceedsAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdcPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdcToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSingleProceeds",
    data: BytesLike
  ): Result;

  events: {
    "ItemBought(tuple,address,address)": EventFragment;
    "ItemListed(tuple,address)": EventFragment;
    "ListingCancelled(address,uint256,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ItemBoughtEventObject {
  listingParams: NftMarketplaceChallenge.ListingParamsStructOutput;
  buyer: string;
  seller: string;
}
export type ItemBoughtEvent = TypedEvent<
  [NftMarketplaceChallenge.ListingParamsStructOutput, string, string],
  ItemBoughtEventObject
>;

export type ItemBoughtEventFilter = TypedEventFilter<ItemBoughtEvent>;

export interface ItemListedEventObject {
  listingParams: NftMarketplaceChallenge.ListingParamsStructOutput;
  seller: string;
}
export type ItemListedEvent = TypedEvent<
  [NftMarketplaceChallenge.ListingParamsStructOutput, string],
  ItemListedEventObject
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export interface ListingCancelledEventObject {
  nftAddress: string;
  tokenId: BigNumber;
  seller: string;
}
export type ListingCancelledEvent = TypedEvent<
  [string, BigNumber, string],
  ListingCancelledEventObject
>;

export type ListingCancelledEventFilter =
  TypedEventFilter<ListingCancelledEvent>;

export interface WithdrawEventObject {
  withdrawer: string;
  amount: BigNumber;
  token: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface NftMarketplaceChallenge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftMarketplaceChallengeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyItem(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDaiPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    getDaiToken(overrides?: CallOverrides): Promise<[string]>;

    getEthPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    getListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NftMarketplaceChallenge.ListingStructOutput]>;

    getListingPriceUsd(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProceeds(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProceedsAll(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getUsdcPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    getUsdcToken(overrides?: CallOverrides): Promise<[string]>;

    listItem(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateListing(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAllProceeds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawSingleProceeds(
      token: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    listingParams: NftMarketplaceChallenge.ListingParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDaiPriceFeed(overrides?: CallOverrides): Promise<string>;

  getDaiToken(overrides?: CallOverrides): Promise<string>;

  getEthPriceFeed(overrides?: CallOverrides): Promise<string>;

  getListing(
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NftMarketplaceChallenge.ListingStructOutput>;

  getListingPriceUsd(
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProceeds(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProceedsAll(overrides?: CallOverrides): Promise<BigNumber[]>;

  getUsdcPriceFeed(overrides?: CallOverrides): Promise<string>;

  getUsdcToken(overrides?: CallOverrides): Promise<string>;

  listItem(
    listingParams: NftMarketplaceChallenge.ListingParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateListing(
    listingParams: NftMarketplaceChallenge.ListingParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAllProceeds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawSingleProceeds(
    token: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDaiPriceFeed(overrides?: CallOverrides): Promise<string>;

    getDaiToken(overrides?: CallOverrides): Promise<string>;

    getEthPriceFeed(overrides?: CallOverrides): Promise<string>;

    getListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NftMarketplaceChallenge.ListingStructOutput>;

    getListingPriceUsd(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceeds(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceedsAll(overrides?: CallOverrides): Promise<BigNumber[]>;

    getUsdcPriceFeed(overrides?: CallOverrides): Promise<string>;

    getUsdcToken(overrides?: CallOverrides): Promise<string>;

    listItem(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateListing(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllProceeds(overrides?: CallOverrides): Promise<void>;

    withdrawSingleProceeds(
      token: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemBought(tuple,address,address)"(
      listingParams?: null,
      buyer?: PromiseOrValue<string> | null,
      seller?: null
    ): ItemBoughtEventFilter;
    ItemBought(
      listingParams?: null,
      buyer?: PromiseOrValue<string> | null,
      seller?: null
    ): ItemBoughtEventFilter;

    "ItemListed(tuple,address)"(
      listingParams?: null,
      seller?: null
    ): ItemListedEventFilter;
    ItemListed(listingParams?: null, seller?: null): ItemListedEventFilter;

    "ListingCancelled(address,uint256,address)"(
      nftAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null
    ): ListingCancelledEventFilter;
    ListingCancelled(
      nftAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null
    ): ListingCancelledEventFilter;

    "Withdraw(address,uint256,uint256)"(
      withdrawer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: null
    ): WithdrawEventFilter;
    Withdraw(
      withdrawer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    buyItem(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDaiPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    getDaiToken(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    getListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingPriceUsd(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceeds(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceedsAll(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdcPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdcToken(overrides?: CallOverrides): Promise<BigNumber>;

    listItem(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateListing(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAllProceeds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawSingleProceeds(
      token: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDaiPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDaiToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEthPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingPriceUsd(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProceeds(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProceedsAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsdcPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listItem(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateListing(
      listingParams: NftMarketplaceChallenge.ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllProceeds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSingleProceeds(
      token: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
