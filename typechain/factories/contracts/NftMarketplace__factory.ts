/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  NftMarketplace,
  NftMarketplaceInterface,
} from "../../contracts/NftMarketplace";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NftMarketplace__NftAlreadyListed",
    type: "error",
  },
  {
    inputs: [],
    name: "NftMarketplace__NotApproved",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "NftMarketplace__NotListed",
    type: "error",
  },
  {
    inputs: [],
    name: "NftMarketplace__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NftMarketplace__PriceMustBeGreaterThanZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "NftMarketplace__PriceNotMet",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    name: "ItemBought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "NftListed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buyItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "listItem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c2a806100206000396000f3fe6080604052600436106100295760003560e01c806389bfd38f1461002e5780639f37092a14610057575b600080fd5b34801561003a57600080fd5b506100556004803603810190610050919061097d565b610073565b005b610071600480360381019061006c919061093d565b6104eb565b005b82823360008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511115610182578383836040517f73a5c40a00000000000000000000000000000000000000000000000000000000815260040161017993929190610a4e565b60405180910390fd5b868633600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016101c59190610abc565b60206040518083038186803b1580156101dd57600080fd5b505afa1580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102159190610910565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461027c576040517f94953b6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a116102b6576040517ffcfdbf1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008c90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8e6040518263ffffffff1660e01b815260040161030b9190610abc565b60206040518083038186803b15801561032357600080fd5b505afa158015610337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035b9190610910565b73ffffffffffffffffffffffffffffffffffffffff16146103a8576040517f8189633e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff168152506000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508a3373ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff167f061b06d224d66454e036e75de172ad87cb7d7f29ee8b7346ca2b48ba0da280428f6040516104d49190610abc565b60405180910390a450505050505050505050505050565b818160008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116105f65782826040517f6d350f220000000000000000000000000000000000000000000000000000000081526004016105ed929190610a25565b60405180910390fd5b60008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806000015134101561070557858582600001516040517f817ce9f10000000000000000000000000000000000000000000000000000000081526004016106fc93929190610a85565b60405180910390fd5b3460016000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107589190610b00565b925050819055506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505060008690508073ffffffffffffffffffffffffffffffffffffffff166342842e0e836020015133896040518463ffffffff1660e01b8152600401610826939291906109ee565b600060405180830381600087803b15801561084057600080fd5b505af1158015610854573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff16868873ffffffffffffffffffffffffffffffffffffffff167f5a679118a5aae67b8c83b551f3b5977f0b2da034b3611bf759910cbbd9c4cff7856000015186602001516040516108c0929190610ad7565b60405180910390a450505050505050565b6000813590506108e081610bc6565b92915050565b6000815190506108f581610bc6565b92915050565b60008135905061090a81610bdd565b92915050565b60006020828403121561092657610925610bc1565b5b6000610934848285016108e6565b91505092915050565b6000806040838503121561095457610953610bc1565b5b6000610962858286016108d1565b9250506020610973858286016108fb565b9150509250929050565b60008060006060848603121561099657610995610bc1565b5b60006109a4868287016108d1565b93505060206109b5868287016108fb565b92505060406109c6868287016108fb565b9150509250925092565b6109d981610b56565b82525050565b6109e881610b88565b82525050565b6000606082019050610a0360008301866109d0565b610a1060208301856109d0565b610a1d60408301846109df565b949350505050565b6000604082019050610a3a60008301856109d0565b610a4760208301846109df565b9392505050565b6000606082019050610a6360008301866109d0565b610a7060208301856109df565b610a7d60408301846109d0565b949350505050565b6000606082019050610a9a60008301866109d0565b610aa760208301856109df565b610ab460408301846109df565b949350505050565b6000602082019050610ad160008301846109df565b92915050565b6000604082019050610aec60008301856109df565b610af960208301846109d0565b9392505050565b6000610b0b82610b88565b9150610b1683610b88565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b4b57610b4a610b92565b5b828201905092915050565b6000610b6182610b68565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b610bcf81610b56565b8114610bda57600080fd5b50565b610be681610b88565b8114610bf157600080fd5b5056fea26469706673582212201e488e9a754fae3e3bdf8d72987423e3b0df87c860b115dbd8e06925fdf2653464736f6c63430008070033";

type NftMarketplaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NftMarketplaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NftMarketplace__factory extends ContractFactory {
  constructor(...args: NftMarketplaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NftMarketplace> {
    return super.deploy(overrides || {}) as Promise<NftMarketplace>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NftMarketplace {
    return super.attach(address) as NftMarketplace;
  }
  override connect(signer: Signer): NftMarketplace__factory {
    return super.connect(signer) as NftMarketplace__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NftMarketplaceInterface {
    return new utils.Interface(_abi) as NftMarketplaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NftMarketplace {
    return new Contract(address, _abi, signerOrProvider) as NftMarketplace;
  }
}
